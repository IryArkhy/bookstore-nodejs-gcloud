generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  email       String        @unique
  username    String        @unique
  name        String?
  surname     String?
  password    String
  role        ROLES         @default(BASIC)
  BookComment BookComment[]
  orders      Order[]
}

model Author {
  id      String @id @default(uuid())
  name    String
  surname String
  books   Book[]
}

model Genre {
  id    String        @id @default(uuid())
  name  String        @unique @db.VarChar(255)
  books GenreOnBook[]
}

model GenreOnBook {
  bookID     String
  genreID    String
  assignedAt DateTime @default(now())
  book       Book     @relation(fields: [bookID], references: [id])
  genre      Genre    @relation(fields: [genreID], references: [id])

  @@id([bookID, genreID])
}

model Book {
  id           String        @id @default(uuid())
  title        String        @unique
  asset        String?
  authorID     String
  description  String
  price        Int
  year         Int
  author       Author        @relation(fields: [authorID], references: [id])
  bookAssest   BookAssest?
  bookComments BookComment[]
  genres       GenreOnBook[]
  orderItems   OrderItem[]

  @@unique([id, authorID])
}

model OrderItem {
  id         String @id @default(uuid())
  orderID    String
  amount     Int
  bookId     String
  totalPrice Int
  book       Book   @relation(fields: [bookId], references: [id])
  order      Order  @relation(fields: [orderID], references: [id])

  @@unique([id, orderID])
}

model Order {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  userID     String
  status     ORDER_STATUS @default(PROCESSING)
  totalPrice Int
  user       User         @relation(fields: [userID], references: [id])
  items      OrderItem[]

  @@unique([id, userID])
}

model BookAssest {
  id        String @id @default(uuid())
  bookID    String @unique
  assetID   String
  publicID  String
  width     Int
  height    Int
  url       String
  secureUrl String
  book      Book   @relation(fields: [bookID], references: [id])

  @@unique([id, bookID])
}

model BookComment {
  id        String   @id @default(uuid())
  bookID    String
  userID    String
  comment   String
  createdAt DateTime @default(now())
  rating    Int?
  book      Book     @relation(fields: [bookID], references: [id])
  user      User     @relation(fields: [userID], references: [id])

  @@unique([id, bookID])
}

enum ROLES {
  BASIC
  ADMIN
}

enum ORDER_STATUS {
  PROCESSING
  CONFIRMED
  IN_PROGRESS
  CANCELED
  DONE
}
